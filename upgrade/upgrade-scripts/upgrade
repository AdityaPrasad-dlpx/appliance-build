#!/bin/bash
#
# Copyright 2018 Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

. "${BASH_SOURCE%/*}/common.sh"

#
# Any changes to this value needs to be careful to properly support
# existing rootfs container datasets which may have this property
# already set. Thus, changes here may require backwards compatibility.
#
ROLLBACK_PROPERTY="com.delphix:rollback-container"

IMAGE_PATH=$(get_image_path)
[[ -n "$IMAGE_PATH" ]] || die "failed to determine image path"

IMAGE_VERSION=$(get_image_version)
[[ -n "$IMAGE_VERSION" ]] || die "failed to determine image version"

#
# This variable is used to determine if a "dry run" of the upgrade
# should be performed, as opposed to an actual upgrade of the system.
# When performing a "dry run", the running system will not be modified.
# The default value can be overridden by setting this environment
# variable to "true", and/or passing the "-n" option to this script (see
# the script's usage). If both, the environment variable and the "-n"
# option are specified, the "-n" option takes precedence.
#
DLPX_UPGRADE_DRY_RUN=${DLPX_UPGRADE_DRY_RUN:-"false"}

#
# This variable is used to determine if the application verification
# checks should be run as part of the upgrade. The default value can be
# overridden by setting this environment variable to "true", and/or
# passing the "-v" option to this script (see the scripts usage). If
# both, the environment variable and the "-v" option are specified, the
# "-v" option takes precedence.
#
DLPX_UPGRADE_SKIP_VERIFY=${DLPX_UPGRADE_SKIP_VERIFY:-"false"}

function usage() {
	echo "$(basename "$0"): $*" >&2

	PREFIX_STRING="Usage: $(basename "$0")"
	PREFIX_NCHARS=$(echo -n "$PREFIX_STRING" | wc -c)
	PREFIX_SPACES=$(printf "%.s " $(seq "$PREFIX_NCHARS"))

	echo "$PREFIX_STRING [-n] [-v] in-place"
	echo "$PREFIX_SPACES [-n] [-v] not-in-place"
	echo "$PREFIX_SPACES rollback"

	exit 2
}

function cleanup_container() {
	#
	# If the CONTAINER variable is empty, this means container
	# creation failed. In that case, the container creation process
	# will have already cleaned up after itself, and there's no
	# further cleanup for us to do here.
	#
	[[ -z "$CONTAINER" ]] && return

	"$IMAGE_PATH/upgrade-container" stop "$CONTAINER" ||
		warn "failed to stop '$CONTAINER'"

	"$IMAGE_PATH/upgrade-container" destroy "$CONTAINER" ||
		warn "failed to destroy '$CONTAINER'"
}

function cleanup_in_place_upgrade() {
	#
	# Capture the exit code here, and use that to determine if
	# upgrade verification was successful or not.
	#
	local rc="$?"

	if [[ "$rc" == "0" ]] ||
		[[ "$rc" != "0" && "$DLPX_DEBUG" != "true" ]]; then
		#
		# On success, or on failure when DLPX_DEBUG is not true,
		# we clean up the container previously created. When
		# DLPX_DEBUG is true, we leave the container around on
		# failure to aid debugging efforts.
		#
		cleanup_container
	fi

	return "$rc"
}

function upgrade_in_place() {
	trap cleanup_in_place_upgrade EXIT

	CONTAINER=$("$IMAGE_PATH/upgrade-container" create in-place)
	[[ -n "$CONTAINER" ]] || die "failed to create container"

	"$IMAGE_PATH/upgrade-container" start "$CONTAINER" ||
		die "failed to start '$CONTAINER'"

	"$IMAGE_PATH/upgrade-container" upgrade "$CONTAINER" ||
		die "Failed to do in-place upgrade on '$CONTAINER'"

	if [[ "$DLPX_UPGRADE_SKIP_VERIFY" != "true" ]]; then
		"$IMAGE_PATH/upgrade-container" run "$CONTAINER" \
			"$IMAGE_PATH/verify-jar" "$@" ||
			die "'$IMAGE_PATH/verify-jar' '$*' failed in '$CONTAINER'"
		"$IMAGE_PATH/upgrade-container" run "$CONTAINER" \
			"$IMAGE_PATH/verify-stack" "$@" ||
			die "'$IMAGE_PATH/verify-stack' '$*' failed in '$CONTAINER'"
	fi

	#
	# When the "dry-run" option is set, we don't want to modify the
	# running system, so we must stop here.
	#
	[[ "$DLPX_UPGRADE_DRY_RUN" == "true" ]] && return

	"$IMAGE_PATH/execute" -p "$(get_platform)" ||
		die "'$IMAGE_PATH/execute' failed in running appliance."
}

function cleanup_not_in_place_upgrade() {
	#
	# Capture the exit code here, and use that to determine if
	# upgrade verification was successful or not.
	#
	local rc="$?"

	if [[ "$rc" == "0" && "$DLPX_UPGRADE_DRY_RUN" == "true" ]] ||
		[[ "$rc" != "0" && "$DLPX_DEBUG" != "true" ]]; then
		#
		# On failure and when DLPX_DEBUG is not true, we clean
		# up the container previously created.
		#
		# Unlike in-place upgrades, the container is not cleaned
		# up on success; instead the container will have been
		# already stopped and converted to be used as the root
		# filesystem for the appliance after the next reboot.
		#
		cleanup_container
	fi

	return "$rc"
}

function upgrade_not_in_place() {
	trap cleanup_not_in_place_upgrade EXIT

	#
	# We query the mounted rootfs container name here, so that if we
	# can't get this information for whatever reason, we can easily
	# handle the error and abort; rather than having to handle this
	# error later, when it might require more work to handle it.
	#
	MOUNTED_CONTAINER="$(get_mounted_rootfs_container_name)"
	[[ -n "$MOUNTED_CONTAINER" ]] ||
		die "failed to determine mounted rootfs container"

	CONTAINER=$("$IMAGE_PATH/upgrade-container" create not-in-place)
	[[ -n "$CONTAINER" ]] || die "failed to create upgrade container"

	"$IMAGE_PATH/upgrade-container" start "$CONTAINER" ||
		die "failed to start upgrade '$CONTAINER'"

	"$IMAGE_PATH/upgrade-container" upgrade "$CONTAINER" ||
		die "Failed to upgrade do not-in-place upgrade on '$CONTAINER'"

	if [[ "$DLPX_UPGRADE_SKIP_VERIFY" != "true" ]]; then
		"$IMAGE_PATH/upgrade-container" run "$CONTAINER" \
			"$IMAGE_PATH/verify-jar" "$@" ||
			die "'$IMAGE_PATH/verify-jar' '$*' failed in '$CONTAINER'"
		if is_upgrade_in_place_allowed; then
			"$IMAGE_PATH/upgrade-container" run "$CONTAINER" \
				"$IMAGE_PATH/verify-stack" "$@" ||
				die "'$IMAGE_PATH/verify-stack' '$*' failed in '$CONTAINER'"
		fi
	fi

	"$IMAGE_PATH/upgrade-container" stop "$CONTAINER" ||
		die "failed to stop '$CONTAINER'"

	#
	# When the "dry-run" option is set, we don't want to modify the
	# running system, so we must stop here.
	#
	[[ "$DLPX_UPGRADE_DRY_RUN" == "true" ]] && return

	#
	# After this point, we no longer want to execute the normal cleanup
	# handler on any failure. The following command will convert the
	# container to be used as the next boot/root filesystem, and thus
	# the "stop" and "destroy" container logic will no longer work. So,
	# if either the "convert-to-rootfs" or "set-bootfs" logic fails,
	# we'll need to manually rectify the situation.
	#
	trap - EXIT

	"$IMAGE_PATH/upgrade-container" convert-to-rootfs "$CONTAINER" ||
		die "failed to convert-to-rootfs '$CONTAINER'"

	#
	# In order for the "rollback" back command to work, we need to
	# know which rootfs container to rollback to. Thus, we embed
	# this information into the rootfs container using a ZFS
	# property; rollback will read this information, to determine
	# which rootfs container to rollback to.
	#
	zfs set \
		"$ROLLBACK_PROPERTY=$MOUNTED_CONTAINER" \
		"rpool/ROOT/$CONTAINER" ||
		die "'zfs set com.delphix:rollback-container' failed"

	"$IMAGE_PATH/rootfs-container" set-bootfs "$CONTAINER" ||
		die "failed to set-bootfs '$CONTAINER'"
}

function rollback() {
	[[ "$DLPX_UPGRADE_DRY_RUN" == "true" ]] &&
		die "unable to perform a 'dry-run' of rollback"

	MOUNTED_ROOTFS_DATASET="$(get_mounted_rootfs_container_dataset)"
	[[ -n "$MOUNTED_ROOTFS_DATASET" ]] ||
		die "failed to determine mounted rootfs container"

	if [[ -n "$(get_dataset_rollback_snapshot_name "$MOUNTED_ROOTFS_DATASET")" ]]; then
		#
		# If a rollback snapshot is found, assume we're rolling
		# back after an in-place upgrade. Thus, we need to
		# create a new "rollback" upgrade container, and then
		# use this upgrade container as the new rootfs/bootfs
		# container.
		#

		CONTAINER="$("$IMAGE_PATH/upgrade-container" create rollback)"
		[[ -n "$CONTAINER" ]] ||
			die "failed to create 'rollback' upgrade container"

		"$IMAGE_PATH/upgrade-container" convert-to-rootfs "$CONTAINER" ||
			die "failed to convert-to-rootfs '$CONTAINER'"

		"$IMAGE_PATH/rootfs-container" set-bootfs "$CONTAINER" ||
			die "failed to set-bootfs '$CONTAINER'"
	else
		#
		# If a rollback snapshot isn't found, assume we're rolling
		# back after a not-in-place upgrade (a snapshot is not
		# generated when performing a not-in-place upgrade), and
		# set the bootloader to use the previous rootfs container.
		#

		CONTAINER="$(zfs get -Hpo value \
			"$ROLLBACK_PROPERTY" "$MOUNTED_ROOTFS_DATASET")"
		[[ -n "$CONTAINER" && "$CONTAINER" != "-" ]] ||
			die "failed to determine rollback rootfs container"

		"$IMAGE_PATH/rootfs-container" set-bootfs "$CONTAINER" ||
			die "failed to set-bootfs '$CONTAINER'"
	fi
}

[[ "$EUID" -ne 0 ]] && die "must be run as root"

while getopts ':nv' c; do
	case "$c" in
	n)
		DLPX_UPGRADE_DRY_RUN="true"
		;;
	v)
		DLPX_UPGRADE_SKIP_VERIFY="true"
		;;
	*)
		usage "invalid option -- '$c'"
		;;
	esac
done
shift $((OPTIND - 1))

case "$1" in
in-place)
	shift 1
	verify_upgrade_is_allowed
	verify_upgrade_in_place_is_allowed
	upgrade_in_place "$@"
	;;
not-in-place)
	shift 1
	verify_upgrade_is_allowed
	upgrade_not_in_place "$@"
	;;
rollback)
	shift 1
	rollback "$@"
	;;
*)
	usage "invalid option -- '$1'"
	;;
esac
