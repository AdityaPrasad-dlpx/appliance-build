#!/bin/bash
#
# Copyright (c) 2017, 2019 by Delphix. All rights reserved.
#

#
# Utility for managing upgrade pause options.
# Supported pause options listed below.
#
# Note that those pause options are intended to be run exclusively for
# migration testing, before the upgrade reboot.
#

PAUSE_OPTIONS_JSON=$(
	cat <<-EOF
		{
		"PAUSE_IN_DX_EXECUTE_BEFORE_RESTART": {
		    "location": "right before reboot"
		},
		"PAUSE_IN_DXSVCINIT_BEFORE_UPGRADE": {
		    "location": "post-reboot before any app upgrade logic"
		},
		"PAUSE_BEFORE_UPGRADE_COMMIT": {
		    "location": "mgmt service (before point of no return)"
		},
		"PAUSE_BEFORE_CHECKPOINT_DISCARD": {
		    "location": "mgmt service (before point of no return)"
		},
		"PAUSE_IN_SVC_ROLLBACK_BEFORE_ROLLBACK": {
		    "location": "rollback service"
		},
		"PAUSE_BEFORE_REWIND_CHECKPOINT": {
		    "location": "rollback service"
		},
		"PAUSE_AFTER_REWIND_CHECKPOINT": {
		    "location": "rollback service"
		},
		"PAUSE_IN_DXSVCINIT_AFTER_ROLLBACK": {
		    "location": "post-rollback before app stack starts"
		},
		"PAUSE_IN_SVC_MGMT_BEFORE_STACK_STARTUP": {
		    "location": "before app stack starts"
		}
		}
	EOF
)

PAUSE_DATASET=rpool/pause_options
DLPX_ENTERED=com.delphix:entered

function die() {
	echo "$(basename "$0"): $*" 1>&2
	exit 1
}

function usage() {
	echo "$(basename "$0"): $*" >&2
	echo "Usage:"
	echo " $(basename "$0") --get-options-json"
	echo "   Prints out a detailed json of all the supported stress options."
	echo " $(basename "$0") --set <pause-option>"
	echo "   Sets the specified pause option. Non-zero exit code on failure."
	echo " $(basename "$0") --unset <pause-option>"
	echo "   Unsets the specified pause option. Non-zero exit code on failure."
	echo " $(basename "$0") --get <pause-option>"
	echo "   Returns exit code 3 if given pause option is set, 0 if unset."
	echo "   Any other non-zero exit code is an unexpected error."
	echo " $(basename "$0") --pause <pause-option>"
	echo "   Does not terminate until the pause option is unset."
	echo "   Non-zero exit code if errors hit, 0 if wait successful."
	echo " $(basename "$0") --wait-for-pause <pause-option>"
	echo "   Does not terminate until the pause option is hit."
	echo "   Non-zero exit code if errors hit, 0 if wait successful."
	exit 2
}

function check_valid_option() {
	local arg="$1"

	local get_names
	get_names=$(
		cat <<-EOF
			import json, sys
			obj=json.load(sys.stdin)
			print(" ".join(obj.keys()))
		EOF
	)
	local options
	options=$(echo "$PAUSE_OPTIONS_JSON" | python -c "$get_names")

	for option in $options; do
		[[ "$option" == "$arg" ]] && return
	done
	usage "Unsupported pause option '$arg'"
}

function set_pause_option() {
	local option="$1"
	local entered="$2"

	if ! zfs list "$PAUSE_DATASET" &>/dev/null; then
		zfs create -o mountpoint=legacy "$PAUSE_DATASET" || return 1
	fi

	if ! zfs list "$PAUSE_DATASET/$option" &>/dev/null; then
		zfs create -o mountpoint=legacy -o "$DLPX_ENTERED=$entered" \
			"$PAUSE_DATASET/$option" || return 1
	else
		zfs set "$DLPX_ENTERED=$entered" "$PAUSE_DATASET/$option" || return 1
	fi
	return 0
}

# Requires option to be set, otherwise returns non-zero code.
function enter_pause_option() {
	local option="$1"
	zfs set "$DLPX_ENTERED=$entered" "$PAUSE_DATASET/$option" || return 1
	return 0
}

function unset_pause_option() {
	local option="$1"

	if zfs list "$PAUSE_DATASET/$option" &>/dev/null; then
		zfs destroy "$PAUSE_DATASET/$option" || return 1
	fi
	return 0
}

function get_pause_option() {
	local option="$1"
	zfs list "$PAUSE_DATASET/$option" &>/dev/null && return 3
	return 0
}

# Verify arguments
[[ $# -ge 1 ]] || usage "missing arguments"

case "$1" in
"--set")
	[[ $# -ge 2 ]] || usage "missing arguments"
	check_valid_option "$2"
	set_pause_option "$2" "false"
	exit $?
	;;
"--unset")
	[[ $# -ge 2 ]] || usage "missing arguments"
	check_valid_option "$2"
	unset_pause_option "$2"
	exit $?
	;;
"--get")
	[[ $# -ge 2 ]] || usage "missing arguments"
	check_valid_option "$2"
	get_pause_option "$2"
	exit $?
	;;
"--pause")
	[[ $# -ge 2 ]] || usage "missing arguments"
	check_valid_option "$2"

	# If option not set, nothing to do.
	get_pause_option "$2" && exit 0

	echo -e "Pausing on $2 ...   \\c"

	# Mark as entered
	enter_pause_option "$2" || die "failed to mark entered"

	get_pause_option "$2"
	enabled=$([[ $? -eq 3 ]] && echo true || echo false)
	while $enabled; do
		sleep 1

		#
		# Enjoy this spinner while you wait...
		# (copied this genius piece of code from start_mgmt_server_jvm)
		#
		case $((SECONDS % 4)) in
		0) echo -e "\\b\\b- \\c" ;;
		1) echo -e "\\b\\b\\ \\c" ;;
		2) echo -e "\\b\\b| \\c" ;;
		3) echo -e "\\b\\b/ \\c" ;;
		esac

		get_pause_option "$2"
		enabled=$([[ $? -eq 3 ]] && echo true || echo false)
	done
	echo "\\b\\b\\b done."
	;;
"--wait-for-pause")
	[[ $# -ge 2 ]] || usage "missing arguments"
	check_valid_option "$2"

	# Check if the option was set
	get_pause_option "$2" && die "pause option $2 not set"

	echo -e "Waiting for pause on $2 ... \\c"
	entered=false
	while ! $entered; do
		sleep 1
		entered=$(zfs get -Ho value $DLPX_ENTERED "$PAUSE_DATASET/$2")
		# shellcheck disable=SC2181
		[[ $? -eq 0 ]] || die "failed to get property for $2"
	done
	echo "done."
	;;
"--get-options-json")
	echo "$PAUSE_OPTIONS_JSON"
	exit $?
	;;
*)
	usage "illegal option '$1'"
	;;
esac

exit 0
