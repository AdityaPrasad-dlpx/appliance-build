#!/bin/bash
#
# Copyright 2018 Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
export MDS_SNAPNAME="MDS-CLONE-upgradeverify"

DEBUG=false

UPGRADE_VERIFY_PATH=/opt/delphix/server/lib/exec/upgrade-verify
UPGRADE_VERIFY_JAR=$UPGRADE_VERIFY_PATH/upgrade-verify.jar
LOG_DIR=/var/delphix/server/upgrade-verify
MGMT_FMRI=svc:/system/delphix/mgmt:default
BINDIR=/opt/delphix/server/bin
DX_MANAGE_PG=$BINDIR/dx_manage_pg

function usage() {
	echo "usage: $(basename "$0") -v <version> -o <report file> -f <report file format> -l <report file locale>"
	echo "  -v <version>: The Delphix version number we're upgrading to"
	echo "  -o <report file>: The output file verification should generate containing an upgrade verification report"
	echo "  -f <report file format>: The format of the upgrade verification report to generate"
	echo "  -l <report file locale>: The locale the upgrade verification report should target"
	echo "  -d: Disable Consistent MDS ZFS Data Utility feature"
	exit 1
}

function cleanup() {
	if ! $DEBUG; then
		if [ -n "$root" ]; then
			cleanup_postgres
			cleanup_datasets
			#TODO LX-1771 cleanup masking
		fi
	fi
}

function die() {
	#TODO save MDS logs, if they exist
	cleanup
	exit 1
}

function report() {
	echo "$(date +%T:%N:%z): $1"
}

function report_progress_inc() {
	echo "Progress increment: $(date +%T:%N%z), $1, $2"
}

function mount_datasets() {
	local version=$1
	local rds

	rds=$(zfs list -o name -H -d3 rpool/ROOT | grep "delphix.*/root")
	[[ -n $rds ]] || die "could not find migration dataset for version $version"

	root=$(mktemp -d) || die "unable to create temporary directory"
	chmod 755 "$root" || die "unable to set permissions for $root"
	mount -F zfs -o ignoremountpoint "$rds" "$root" || die "unable to mount $rds"

	#TODO dummy files for UpgradeVerify, see LX-1817 and LX-1808
	touch /var/dlpx-update/"$version"/etc_system_whitelist
	touch /var/dlpx-update/"$version"/dx_upg_stress_options

	#TODO LX-1771 setup datasets for masking check
}

function cleanup_datasets() {
	umount -f "$root"
	rmdir "$root"
}

function cleanup_postgres() {
	"$root$DX_MANAGE_PG" stop -s $MDS_SNAPNAME ||
		echo "failed to stop postgres"
	"$root$DX_MANAGE_PG" cleanup -s $MDS_SNAPNAME ||
		echo "failed to clean up postgres"
}

function run_upgrade_verify() {
	local output=$1
	local format=$2
	local locale=$3
	local upgrade_verify_opts
	$disable_consistent_mds_zfs_data_util &&
		upgrade_verify_opts="-disableConsistentMdsZfsDataUtil"
	local progress_low=$4
	local progress_high=$5

	[[ $(svcprop -p delphix/debug $MGMT_FMRI) == "true" ]] &&
		delphix_debug="-Ddelphix.debug=true"

	java=/opt/jdk/bin/java
	jar=$root$UPGRADE_VERIFY_JAR

	$java -Dlog.dir=$LOG_DIR -Dmdsverify=true "$delphix_debug" \
		-DosMigration=true -jar "$jar" -d "$output" -f "$format" \
		-l "$locale" -v "$version" -root "$root" "$upgrade_verify_opts" \
		-droot "$root" -pl "$progress_low" -ph "$progress_high" ||
		die "upgrade verification failed"
}

disable_consistent_mds_zfs_data_util=false
while getopts ':v:o:l:f:d' c; do
	case "$c" in
	f) format=$OPTARG ;;
	l) locale=$OPTARG ;;
	o) output=$OPTARG ;;
	v) version=$OPTARG ;;
	d) disable_consistent_mds_zfs_data_util=true ;;
	*) usage ;;
	esac
done

[[ -n $version ]] || usage

# Where root is or will be mounted. Set in mount_datasets.
root=

report_progress_inc 0 "preparing for verification"
mount_datasets "$version"
report_progress_inc 20 "running upgrade checks"
run_upgrade_verify "$output" "$format" "$locale" 20 95
#TODO LX-1808 stress options
#TODO LX-1771 test_masking
report_progress_inc 95 "cleaning up post-verification"
cleanup
report_progress_inc 100 "done"
exit 0
